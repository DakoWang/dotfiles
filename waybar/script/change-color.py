import os
import argparse
from pathlib import Path

config_file = '/home/tomato/.config/waybar/waybar_theme_config'
css_file = "/home/tomato/.config/waybar/customcolors.css"

# 现代化颜色方案
COLOR_SCHEMES = {
    "dark": {
        "bg_color": "#1e1e2e",      # 深色背景
        "text_color": "#cdd6f4",    # 浅色文字
        "accent_color": "#89b4fa",  # 蓝色强调色
        "urgent_color": "#f38ba8",  # 红色紧急提示
        "hover_color": "#585b70",   # 悬停颜色
        "volume_color": "#f5c2e7",  # 音量颜色-粉红色(maroon)
        "brightness_color": "#f9e2af", # 亮度颜色-黄色(yellow)
        "battery_color": "#a6e3a1",  # 电池颜色-绿色(green)
        "clock_color": "#89b4fa",    # 时钟颜色-蓝色(blue)
        "music_color": "#cba6f7",    # 音乐颜色-紫色(mauve)
        "lock_color": "#b4befe",     # 锁定颜色-淡紫色(lavender)
        "power_color": "#f38ba8"     # 电源颜色-红色(red)
    },
    "light": {
        "bg_color": "#f5f5fa",      # 浅色背景
        "text_color": "#4c4f69",    # 深色文字
        "accent_color": "#1e66f5",  # 蓝色强调色
        "urgent_color": "#d20f39",  # 红色紧急提示
        "hover_color": "#ccd0da",   # 悬停颜色
        "volume_color": "#ea76cb",  # 音量颜色(maroon)
        "brightness_color": "#df8e1d", # 亮度颜色(yellow)
        "battery_color": "#40a02b",  # 电池颜色(green)
        "clock_color": "#1e66f5",    # 时钟颜色(blue)
        "music_color": "#8839ef",    # 音乐颜色(mauve)
        "lock_color": "#7287fd",     # 锁定颜色(lavender)
        "power_color": "#d20f39"     # 电源颜色(red)
    }
}

def get_current_theme():
    """从配置文件中获取当前主题设置"""
    if os.path.exists(config_file):
        with open(config_file, 'r') as f:
            theme = f.read().strip()
            if theme in COLOR_SCHEMES:
                return theme
    else:
        print(f"配置文件不存在: {config_file}")
        with open(config_file, 'w') as f:
            f.write('dark')
        return 'dark'
    
    return 'dark'

def update_colors(current_theme):
    """更新Waybar颜色配置文件"""
    if current_theme not in COLOR_SCHEMES:
        raise ValueError(f"Unsupported theme: {current_theme}. Choose 'dark' or 'light'")
    
    if current_theme == 'dark':
        colors = COLOR_SCHEMES['light']
    else:
        colors = COLOR_SCHEMES['dark']

    css_content = f"""/* Auto-generated by waybar theme switcher */
@define-color bg_color {colors["bg_color"]};
@define-color text_color {colors["text_color"]};
@define-color accent_color {colors["accent_color"]};
@define-color urgent_color {colors["urgent_color"]};
@define-color hover_color {colors["hover_color"]};
@define-color volume_color {colors["volume_color"]};
@define-color brightness_color {colors["brightness_color"]};
@define-color battery_color {colors["battery_color"]};
@define-color clock_color {colors["clock_color"]};
@define-color music_color {colors["music_color"]};
@define-color lock_color {colors["lock_color"]};
@define-color power_color {colors["power_color"]};
"""
    
    with open(css_file, 'w') as f:
        f.write(css_content)
    print(f"Updated colors to {colors} theme")

    if current_theme == 'dark':
        return 'light'
    else:
        return 'dark'


def restart_waybar():
    """重启Waybar"""
    os.system('killall -SIGUSR2 waybar')

def save_theme(new_theme):
    """将当前主题保存到配置文件中"""
    with open(config_file, 'w') as f:
        f.write(str(new_theme))

def main():
    try:
        current_theme = get_current_theme()
        print(f"当前主题: {current_theme}")
        new_theme = update_colors(current_theme)
        save_theme(new_theme)
        print(f"保存主题: {new_theme}")
        restart_waybar()
    except Exception as e:
        print(f"Error: {e}")
        exit(1)

if __name__ == "__main__":
    main()